This directory contains GNU tput, a program to enable shell scripts to
portably use special terminal capabilities.  Although its interface is
similar to that of terminfo-based tput programs, it actually uses termcap.

To compile:

1.  Type `./configure'.  This shell script attempts to guess correct
values for various system-dependent variables used during compilation,
and creates the file `Makefile'.  This takes a minute or so.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for variables by setting them in the environment; in
Bourne-compatible shells, you can do that on the command line like
this:
$ CC='gcc -traditional' LIBS=-lposix ./configure

2.  If you want to change the directory where the program will be
installed, or the optimization options, edit `Makefile' and change
those values.  If you have an unusual system that needs special
compilation options that `configure' doesn't know about, and you
didn't pass them in the environment when running `configure', you
should add them to `Makefile' now.  Alternately, teach `configure' how
to figure out that it is being run on a system where they are needed,
and mail the diffs to the address listed at the end of this file so we
can include them in the next release.

3.  Type `make'.

4.  If the program compiles successfully, type `make install' to
install it.

5.  After you have installed the program, you can remove the binary
from the source directory by typing `make clean'.  Type `make
realclean' if you also want to remove `Makefile', for instance if you
are going to recompile next on another type of machine.

To do for POSIX:
Add `init' and `reset' options.

Mail suggestions and bug reports for GNU tput to
bug-gnu-utils@prep.ai.mit.edu.
